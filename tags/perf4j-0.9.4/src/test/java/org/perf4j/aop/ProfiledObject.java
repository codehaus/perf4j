/* Copyright Homeaway, Inc 2005-2007. All Rights Reserved.
 * No unauthorized use of this software.
 */
package org.perf4j.aop;

/**
 * Dummy class used to test aspects.
 */
public class ProfiledObject {
    @Profiled
    public long simpleTestDefaultTag(long sleepTime) throws Exception {
        Thread.sleep(sleepTime);
        return sleepTime;
    }
    
    @Profiled(tag = "simple")
    public long simpleTest(long sleepTime) throws Exception {
        Thread.sleep(sleepTime);
        return sleepTime;
    }

    @Profiled(tag = "simpleWithMessage", message = "message")
    public long simpleTestWithMessage(long sleepTime) throws Exception {
        Thread.sleep(sleepTime);
        return sleepTime;
    }

    @Profiled(tag = "simpleWithFails", message = "messageWithFails", logFailuresSeparately = true)
    public long simpleTestWithFailuresSeparate(long sleepTime, boolean shouldFail) throws Exception {
        Thread.sleep(sleepTime);
        if (shouldFail) {
            throw new Exception("shouldFail was true");
        }
        return sleepTime;
    }

    @Profiled(tag = "expressionTest_{$0}_{$1.name}_{$1.age}")
    public long simpleTestWithJexlTag(long sleepTime, SimpleBean bean) throws Exception {
        Thread.sleep(sleepTime);
        return sleepTime;
    }

    @Profiled(tag = "expressionTest_{$0}_{$1.name}_{$1.age}", message = "message_{$0}_{$1.name}_{$1.age}")
    public long simpleTestWithJexlTagAndMessage(long sleepTime, SimpleBean bean) throws Exception {
        Thread.sleep(sleepTime);
        return sleepTime;
    }

    @Profiled(tag = "expressionTest", message = "message_{$0}_{$1.name}_{$1.age}")
    public long simpleTestWithJexlMessageOnly(long sleepTime, SimpleBean bean) throws Exception {
        Thread.sleep(sleepTime);
        return sleepTime;
    }

    /**
     * A simple wrapper method that will expose a call joinpoint on a Profiled method.
     * If the AbstractTimingAspect isn't correctly configured, this will result in a log
     * line in addition to the line generated by the execution of the simpleTest method.
     */
    public long simpleMethodCallExample(long sleepTime) throws Exception {
        return simpleTest(sleepTime);
    }

    public static class SimpleBean {
        private String name;
        private int age;

        public SimpleBean() { }

        public SimpleBean(String name, int age) {
            this.name = name;
            this.age = age;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getAge() {
            return age;
        }

        public void setAge(int age) {
            this.age = age;
        }
    }
}
